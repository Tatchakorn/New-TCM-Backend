from django.db import models
from django.utils.translation import gettext_lazy as _
from django.contrib.auth.models import (
    AbstractBaseUser,
    PermissionsMixin,
    BaseUserManager,
)


class CustomAccountManager(BaseUserManager):

    def create_user(self,
                    email: str,
                    username: str,
                    password: str,
                    **other_fields) -> object:
        if not email:
            raise ValueError(_('You must provide an email address'))

        email = self.normalize_email(email)
        other_fields.setdefault('is_active', True)
        user = self.model(
            email=email,
            username=username,
            **other_fields)
        user.set_password(password)
        user.save()
        return user
        # return self.create_user(email, username, password, **other_fields)

    def create_superuser(self,
                         email: str,
                         username: str,
                         password: str,
                         **other_fields) -> object:
        other_fields.setdefault('is_active', True)
        other_fields.setdefault('is_staff', True)
        other_fields.setdefault('is_superuser', True)

        if other_fields.get('is_staff') is not True:
            raise ValueError(_('Superuser must be assigned to is_staff=True.'))

        if other_fields.get('is_active') is not True:
            raise ValueError(
                _('Superuser must be assigned to is_active=True.'))

        return self.create_user(email, username, password, **other_fields)


class Employee(AbstractBaseUser, PermissionsMixin):
    '''
    EmployeeID VARCHAR(50) <pk> auto-generated by Django
    EmployeeName VARCHAR(50)
    EmployeeIdNum VARCHAR(20)
    EmployeeDepartment VARCHAR(20)
    EmployeePhone VARCHAR(20)
    EmployeeEmail VARCHAR(50)
    ** EmployeePassword VARCHAR(200)
    '''

    # class Meta:
    #     db_table = 'Employee'
    
    email = models.EmailField(_('email address'), unique=True)
    username = models.CharField(max_length=150, unique=True)
    phone_number = models.CharField(max_length=20, blank=True, null=True)
    department = models.CharField(max_length=20, blank=True, null=True)
    id_num = models.CharField(max_length=20, blank=True, null=True)

    is_staff = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)

    objects = CustomAccountManager()
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']

    def __str__(self) -> str:
        return self.username


class EmployeeWorkSchedule(models.Model):
    '''
    EmployeeWorkSchedule VARCHAR(50) <pk> auto-generated by Django
    EmployeeID VARCHAR(50) <fk>
    EmployeeWorkScheduleDay DATE
    EmployeeWorkSchedulePeriod VARCHAR(20)
    '''
    employee_id = models.ForeignKey(
        Employee,
        related_name='employee_work_schedule',
        on_delete=models.CASCADE)
    employee_work_schedule_day = models.DateField(auto_now=False, auto_now_add=False)
    employee_work_schedule_day_period = models.CharField(max_length=20, blank=True, null=True)

    def __str__(self):
        return '%s %s' % (self.employee_work_schedule_day, self.employee_work_schedule_day_period)